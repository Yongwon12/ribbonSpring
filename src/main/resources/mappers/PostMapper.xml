<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.ribbon.mapper.PostMapper">

    <!-- boardwrite 테이블 전체 컬럼 -->
    <sql id="postColumns">
        id
        , userid
        , title
        , description
        , img
        , writedate
        , nickname
        , boardid
        , likedcount
        , commentcount
    </sql>

    <!-- groupwrite 테이블 전체 컬럼 -->
    <sql id="postGroupColumns">
        id
        , region
        , title
        , line
        , description
        , peoplenum
        , gender
        , minage
        , titleimage
        , userid
        , maxage
        , writedate
        , peoplenownum
        , nickname
        , groupid
        , once
        , commentcount
    </sql>
    <!-- individualwrite 테이블 전체 컬럼 -->
    <sql id="postIndiColumns">
        id
        , region
        , meetdate
        , title
        , description
        , gender
        , userid
        , writedate
        , maxage
        , minage
        , nickname
        , individualid
        , likedcount
        , commentcount
    </sql>


    <!-- usedwrite 테이블 전체 컬럼 -->
    <sql id="postUsedColumns">
        id
        , region
        , title
        , description
        , usedimage1
        , price
        , userid
        , writedate
        , nickname
        , usedid
        , usedimage2
        , usedimage3
        , usedimage4
        , usedimage5
        , likedcount
        , commentcount
    </sql>

    <!-- user 테이블 전체 컬럼 -->
    <sql id="postUserColumns">
        userid
        , username
        , password
        , email
        , nickname
        , mobile
        , createdate
        , modifydate
        , birth
        , profileimage
        , gender
        , bestcategory
        , shortinfo
    </sql>
    <!-- liked 테이블 전체 컬럼 -->
    <sql id="postLikedColumns">
        categoryid
        , userid
        , inherentid
    </sql>
    <!-- comments 테이블 전체 컬럼 -->
    <sql id="postCommentsColumns">
        description
        , userid
        , nickname
        , categoryid
        , inherentid
        , writedate
        , likedcount
        , commentsid
        , isrecomment
    </sql>

    <!-- groupcomments 테이블 전체 컬럼 -->
    <sql id="postGroupCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , likedcount
        , groupcommentsid
        , isrecomment
    </sql>

    <!-- individualcomments 테이블 전체 컬럼 -->
    <sql id="postIndividualCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , likedcount
        , individualcommentsid
        , isrecomment
    </sql>

    <!-- usedcomments 테이블 전체 컬럼 -->
    <sql id="postUsedCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , likedcount
        , usedcommentsid
        , isrecomment
    </sql>

    <!-- reply 테이블 전체 컬럼 -->
    <sql id="postReplyColumns">
        description
        , writedate
        , userid
        , nickname
        , categoryid
        , inherentid
        , likedcount
        , replyid
        , inherentcommentsid
        , isrecomment
    </sql>

    <!-- groupreply 테이블 전체 컬럼 -->
    <sql id="postGroupReplyColumns">
        description
        , writedate
        , userid
        , nickname
        , inherentid
        , likedcount
        , groupreplyid
        , inherentcommentsid
        , isrecomment
    </sql>

    <!-- individualreply 테이블 전체 컬럼 -->
    <sql id="postIndividualReplyColumns">
        description
        , writedate
        , userid
        , nickname
        , inherentid
        , likedcount
        , individualreplyid
        , inherentcommentsid
        , isrecomment
    </sql>

    <!-- usedreply 테이블 전체 컬럼 -->
    <sql id="postUsedReplyColumns">
        description
        , writedate
        , userid
        , nickname
        , inherentid
        , likedcount
        , usedreplyid
        , inherentcommentsid
        , isrecomment
    </sql>



    <!-- 커뮤니티 게시글 저장 -->
    <insert id="save" parameterType="com.project.ribbon.domain.post.PostRequest"
    useGeneratedKeys="true" keyProperty="boardid">
        INSERT INTO boardwrite (
        <include refid="postColumns" />
        ) VALUES (
        #{id}
        , #{userid}
        , #{title}
        , #{description}
        , #{img}
        , #{writedate}
        , #{nickname}
        , #{boardid}
        , 0
        , 0
        )
    </insert>


    <!-- 커뮤니티 게시글 수정 -->
    <update id="update" parameterType="com.project.ribbon.domain.post.PostRequest">
        UPDATE boardwrite
        SET
            title = #{title}
          , description = #{description}
          , img = #{img}
          , writedate = #{writedate}
          , profileimage = #{profileimage}
        WHERE
            boardid = #{boardid}
    </update>




    <!-- 커뮤니티 게시글  조회 -->
    <select id="findAll1" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
        id,boardwrite.userid,title,description,img,writedate,user.nickname,
        boardid,likedcount,commentcount,profileimage
        from boardwrite
        left join user
        on user.userid=boardwrite.userid
        where id = 1
    </select>
    <select id="findAll2" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 2
    </select>
    <select id="findAll3" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 3
    </select>
    <select id="findAll4" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 4
    </select>
    <select id="findAll5" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 5
    </select>
    <select id="findAll6" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 6
    </select>
    <select id="findAll7" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 7
    </select>
    <select id="findAll8" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 8
    </select>
    <select id="findAll9" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 9
    </select>
    <select id="findAll10" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        where id = 10
    </select>
    <!-- 커뮤니티 게시글 삭제 -->
    <delete id="deleteById" >
        DELETE
        FROM
        boardwrite
        where boardid = #{boardid}
    </delete>

    <!-- 단체 게시글 조회  -->
    <select id="findGroupAll" resultType="com.project.ribbon.domain.post.PostGroupResponse">
        SELECT
        <include refid="postGroupColumns" />
        FROM
            groupwrite
    </select>

    <!-- 단체 게시글 저장 -->
    <insert id="saveGroup" parameterType="com.project.ribbon.domain.post.PostGroupRequest"
            useGeneratedKeys="true" keyProperty="groupid">
        INSERT INTO groupwrite (
        <include refid="postGroupColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{title}
        , #{line}
        , #{description}
        , #{peoplenum}
        , #{gender}
        , #{minage}
        , #{titleimage}
        , #{userid}
        , #{maxage}
        , #{writedate}
        , #{peoplenownum}
        , #{nickname}
        , #{groupid}
        , #{once}
        , 0
        )
    </insert>

    <!-- 단체 게시글 수정 -->
    <update id="updateGroup" parameterType="com.project.ribbon.domain.post.PostGroupRequest">
        UPDATE groupwrite
        SET
            region = #{region}
          , title = #{title}
          , line = #{line}
          , description = #{description}
          , peoplenum = #{peoplenum}
          , minage = #{minage}
          , titleimage = #{titleimage}
          , maxage = #{maxage}
          , writedate = #{writedate}
          , peoplenownum = #{peoplenownum}
          , once = #{once}
        WHERE
            groupid = #{groupid}
    </update>

    <!-- 단체 게시글 삭제 -->
    <delete id="deleteByGroupId" >
        DELETE
        FROM
            groupwrite
        where groupid = #{groupid}
    </delete>


    <!-- 개인 게시글 조회  -->
    <select id="findIndiAll" resultType="com.project.ribbon.domain.post.PostIndiResponse">
        SELECT
        id,region,meetdate,title,description,individualwrite.gender,
        individualwrite.userid,writedate,maxage,minage,user.nickname,
        individualid,likedcount,commentcount,profileimage
        FROM
        individualwrite
        left join user
        on user.userid = individualwrite.userid

    </select>

    <!-- 개인 게시글 저장 -->
    <insert id="saveIndi" parameterType="com.project.ribbon.domain.post.PostIndiRequest"
            useGeneratedKeys="true" keyProperty="individualid">
        INSERT INTO individualwrite (
        <include refid="postIndiColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{meetdate}
        , #{title}
        , #{description}
        , #{gender}
        , #{userid}
        , #{writedate}
        , #{maxage}
        , #{minage}
        , #{nickname}
        , #{individualid}
        , 0
        , 0
        )
    </insert>

    <!-- 개인 게시글 수정 -->
    <update id="updateIndi" parameterType="com.project.ribbon.domain.post.PostIndiRequest">
        UPDATE individualwrite
        SET
            region = #{region}
          , meetdate = #{meetdate}
          , title = #{title}
          , description = #{description}
          , writedate = #{writedate}
          , maxage = #{maxage}
          , minage = #{minage}
        WHERE
            individualid = #{individualid}
    </update>


    <!-- 개인 게시글 삭제 -->
    <delete id="deleteByIndiId" >
        DELETE
        FROM
            individualwrite
        where individualid = #{individualid}
    </delete>

    <!-- 중고 게시글 조회  -->
    <select id="findUsedAll" resultType="com.project.ribbon.domain.post.PostUsedResponse">
        SELECT
        <include refid="postUsedColumns" />
        FROM
        usedwrite
    </select>

    <!-- 중고 게시글 저장 -->
    <insert id="saveUsed" parameterType="com.project.ribbon.domain.post.PostUsedRequest"
            useGeneratedKeys="true" keyProperty="usedid">
        INSERT INTO usedwrite (
        <include refid="postUsedColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{title}
        , #{description}
        , #{usedimage1}
        , #{price}
        , #{userid}
        , #{writedate}
        , #{nickname}
        , #{usedid}
        , #{usedimage2}
        , #{usedimage3}
        , #{usedimage4}
        , #{usedimage5}
        , 0
        , 0
        )
    </insert>

    <!-- 중고 게시글 수정 -->
    <update id="updateUsed" parameterType="com.project.ribbon.domain.post.PostUsedRequest">
        UPDATE usedwrite
        SET
            region = #{region}
          , title = #{title}
          , description = #{description}
          , usedimage1 = #{usedimage1}
          , price = #{price}
          , writedate = #{writedate}
          , usedimage2 = #{usedimage2}
          , usedimage3 = #{usedimage3}
          , usedimage4 = #{usedimage4}
          , usedimage5 = #{usedimage5}
        WHERE
            usedid = #{usedid}
    </update>

    <!-- 중고 게시글 삭제 -->
    <delete id="deleteByUsedId" >
        DELETE
        FROM
            usedwrite
        where usedid = #{usedid}
    </delete>

    <!-- 유저 정보 조회  -->
    <select id="findUserAll" resultType="com.project.ribbon.domain.post.PostUserResponse">
        SELECT
        userid
        FROM
        user ORDER BY userid DESC LIMIT 1;
    </select>

    <!-- 유저 가입 -->
    <insert id="saveUser" parameterType="com.project.ribbon.domain.post.PostUserRequest"
            useGeneratedKeys="true" keyProperty="userid">
        INSERT INTO user (
        <include refid="postUserColumns" />
        ) VALUES (
        #{userid}
        , #{username}
        , #{password}
        , #{email}
        , #{nickname}
        , #{mobile}
        , #{createdate}
        , #{modifydate}
        , #{birth}
        , #{profileimage}
        , #{gender}
        , #{bestcategory}
        , #{shortinfo}
        )

    </insert>

    <!-- 유저 마이페이지 수정 -->
    <update id="updateUser" parameterType="com.project.ribbon.domain.post.PostUserRequest">
        UPDATE user
        SET
            nickname = #{nickname}
          , profileimage = #{profileimage}
          , modifyDate = #{modifydate}
          , bestcategory = #{bestcategory}
          , shortinfo = #{shortinfo}
            , birth = #{birth}
        WHERE
            userid = #{userid}
    </update>



    <!-- 유저 정보 삭제 -->
    <delete id="deleteByUserId" >
        DELETE
        FROM
            user
        where userid = #{userid}
    </delete>
    <!-- 실시간 인기글 -->
    <select id="findAll11" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        WHERE
            likedcount
                = (SELECT max(likedcount) FROM boardwrite)
        ORDER BY
            boardid
            DESC
             limit 1
    </select>


    <!-- 좋아요 삽입 -->
    <insert id="saveLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest"
            >
        INSERT INTO liked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{userid}
        , #{inherentid}
        )

    </insert>
    <!-- 좋아요 갯수 카운트 +1 -->
    <update id="updateLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest">

        update boardwrite set likedcount = likedcount + 1 where boardid = #{inherentid}

    </update>
    <!-- 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest">

        update boardwrite set likedcount = likedcount - 1 where boardid = #{inherentid}

    </update>

    <!-- 좋아요 삭제 -->
    <delete id="deleteByLikedId" >
        DELETE
        FROM
            liked
        where categoryid = #{categoryid}
        AND userid = #{userid}
        AND inherentid = #{inherentid}
    </delete>
    <!-- 개인 좋아요 삽입 -->
    <insert id="saveIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest"
    >
        INSERT INTO individualliked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{userid}
        , #{inherentid}
        )

    </insert>
    <!-- 개인 좋아요 갯수 카운트 +1 -->
    <update id="updateIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest">

        update individualwrite set likedcount = likedcount + 1 where individualid = #{inherentid}

    </update>
    <!-- 개인 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest">

        update individualwrite set likedcount = likedcount - 1 where individualid = #{inherentid}

    </update>

    <!-- 개인 좋아요 삭제 -->
    <delete id="deleteByIndividualLikedId" >
        DELETE
        FROM
            individualliked
        where categoryid = #{categoryid}
          AND userid = #{userid}
          AND inherentid = #{inherentid}
    </delete>
    <!-- 중고 좋아요 삽입 -->
    <insert id="saveUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest"
    >
        INSERT INTO usedliked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{userid}
        , #{inherentid}
        )
    </insert>
    <!-- 중고 좋아요 갯수 카운트 +1 -->
    <update id="updateUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest">

        update usedwrite set likedcount = likedcount + 1 where usedid = #{inherentid}

    </update>
    <!-- 중고 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest">

        update usedwrite set likedcount = likedcount - 1 where usedid = #{inherentid}

    </update>

    <!-- 중고 좋아요 삭제 -->
    <delete id="deleteByUsedLikedId" >
        DELETE
        FROM
            usedliked
        where categoryid = #{categoryid}
          AND userid = #{userid}
          AND inherentid = #{inherentid}
    </delete>


    <!-- 댓글 작성자 아이디 조회  -->
    <select id="findCommentsId" resultType="com.project.ribbon.domain.post.PostCommentsIdResponse">
        SELECT
        commentsid
        FROM
            comments
        order by commentsid desc limit 1
    </select>
    <!-- 댓글 정보 조회  -->
    <select id="findByInherentId" resultType="com.project.ribbon.domain.post.PostCommentsResponse">
        select
            description,writedate,comments.userid,user.nickname,categoryid
            inherentid,likedcount,commentsid,isrecomment,
            profileimage
        from comments
        left join user
        on user.userid = comments.userid
         where inherentid = #{inherentid}
    </select>

    <!-- 댓글 작성 -->
    <insert id="saveComments" parameterType="com.project.ribbon.domain.post.PostCommentsRequest"
            useGeneratedKeys="true" keyProperty="commentsid">
        INSERT INTO comments (
        <include refid="postCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{categoryid}
        , #{inherentid}
        , #{writedate}
        , 0
        , #{commentsid}
        , 2
        )

    </insert>

    <!-- 댓글 갯수 카운트 +1 -->
    <update id="updateCommentsCount" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">

        update boardwrite set commentcount = commentcount + 1 where boardid = #{inherentid}

    </update>
    <!-- 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteCommentsCount" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">

        update boardwrite set commentcount = commentcount - 1 where boardid = #{inherentid}

    </update>

    <!-- 댓글 수정 -->
    <update id="updateComments" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">
        UPDATE comments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            commentsid = #{commentsid}
    </update>


    <!-- 댓글 정보 삭제 -->
    <delete id="deleteComments" >
        DELETE
        FROM
            comments
        where commentsid = #{commentsid}
    </delete>

    <!-- 답글 작성자 아이디 조회  -->
    <select id="findReplyId" resultType="com.project.ribbon.domain.post.PostReplyIdResponse">
        SELECT
            replyid
        FROM
            reply
        order by replyid desc limit 1
    </select>
    <!-- 답글 정보 조회  -->
    <select id="findByReplyInherentId" resultType="com.project.ribbon.domain.post.PostReplyResponse">
        select
            description,writedate,reply.userid,user.nickname,categoryid,
            inherentid,likedcount,replyid,inherentcommentsid,isrecomment,
            profileimage
        from reply
        left join user
        on user.userid = reply.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 답글 작성 -->
    <insert id="saveReply" parameterType="com.project.ribbon.domain.post.PostReplyRequest"
            useGeneratedKeys="true" keyProperty="replyid">
        INSERT INTO reply (
        <include refid="postReplyColumns" />
        ) VALUES (
        #{description}
        , #{writedate}
        , #{userid}
        , #{nickname}
        , #{categoryid}
        , #{inherentid}
        , 0
        , #{replyid}
        , #{inherentcommentsid}
        , 1
        )

    </insert>

    <!-- 답글 갯수 카운트 +1 -->
    <update id="updateReplyCount" parameterType="com.project.ribbon.domain.post.PostReplyRequest">

        update boardwrite set commentcount = commentcount + 1 where boardid = #{inherentid}

    </update>
    <!-- 답글 갯수 카운트 -1 -->
    <update id="updateDeleteReplyCount" parameterType="com.project.ribbon.domain.post.PostReplyRequest">

        update boardwrite set commentcount = commentcount - 1 where boardid = #{inherentid}

    </update>

    <!-- 답글 수정 -->
    <update id="updateReply" parameterType="com.project.ribbon.domain.post.PostReplyRequest">
        UPDATE reply
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            reply = #{replyid}
    </update>



    <!-- 답글 정보 삭제 -->
    <delete id="deleteReply" >
        DELETE
        FROM
            reply
        where replyid = #{replyid}
    </delete>


    <!-- 단체 댓글 작성자 아이디 조회  -->
    <select id="findGroupCommentsId" resultType="com.project.ribbon.domain.post.PostGroupCommentsIdResponse">
        SELECT
            groupcommentsid
        FROM
            groupcomments
        order by groupcommentsid desc limit 1
    </select>
    <!-- 단체 댓글 정보 조회  -->
    <select id="findByGroupInherentId" resultType="com.project.ribbon.domain.post.PostGroupCommentsResponse">
        select
            description,groupcomments.userid,user.nickname,inherentid,
            writedate,likedcount,groupcommentsid,isrecomment,profileimage
        from groupcomments
        left join user
        on user.userid = groupcomments.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 단체 댓글 작성 -->
    <insert id="saveGroupComments" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest"
            useGeneratedKeys="true" keyProperty="groupcommentsid">
        INSERT INTO groupcomments (
        <include refid="postGroupCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , 0
        , #{commentsid}
        , 2
        )

    </insert>

    <!-- 단체 댓글 갯수 카운트 +1 -->
    <update id="updateGroupCommentsCount" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">

        update groupwrite set commentcount = commentcount + 1 where groupid = #{inherentid}

    </update>
    <!-- 단체 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteGroupCommentsCount" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">

        update groupwrite set commentcount = commentcount - 1 where groupid = #{inherentid}

    </update>

    <!-- 단체 댓글 수정 -->
    <update id="updateGroupComments" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">
        UPDATE groupcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            groupcommentsid = #{groupcommentsid}
    </update>


    <!-- 단체 댓글 정보 삭제 -->
    <delete id="deleteGroupComments" >
        DELETE
        FROM
            groupcomments
        where groupcommentsid = #{groupcommentsid}
    </delete>

    <!-- 단체 답글 작성자 아이디 조회  -->
    <select id="findGroupReplyId" resultType="com.project.ribbon.domain.post.PostGroupReplyIdResponse">
        SELECT
            groupreplyid
        FROM
            groupreply
        order by groupreplyid desc limit 1
    </select>
    <!-- 단체 답글 정보 조회  -->
    <select id="findByGroupReplyInherentId" resultType="com.project.ribbon.domain.post.PostGroupReplyResponse">
        select
            description,writedate,groupreply.userid,user.nickname,
            inherentid,likedcount,groupreplyid,inherentcommentsid,isrecomment,
            profileimage
        from groupreply
        left join user
        on uesr.userid = groupreply.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 단체 답글 작성 -->
    <insert id="saveGroupReply" parameterType="com.project.ribbon.domain.post.PostGroupReplyRequest"
            useGeneratedKeys="true" keyProperty="groupreplyid">
        INSERT INTO groupreply (
        <include refid="postGroupReplyColumns" />
        ) VALUES (
        #{description}
        , #{writedate}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , 0
        , #{groupreplyid}
        , #{inherentcommentsid}
        , 1
        )

    </insert>

    <!-- 단체 답글 갯수 카운트 +1 -->
    <update id="updateGroupReplyCount" parameterType="com.project.ribbon.domain.post.PostGroupReplyRequest">

        update groupwrite set commentcount = commentcount + 1 where groupid = #{inherentid}

    </update>
    <!-- 단체 답글 갯수 카운트 -1 -->
    <update id="updateDeleteGroupReplyCount" parameterType="com.project.ribbon.domain.post.PostGroupReplyRequest">

        update groupwrite set commentcount = commentcount - 1 where groupid = #{inherentid}

    </update>

    <!-- 단체 답글 수정 -->
    <update id="updateGroupReply" parameterType="com.project.ribbon.domain.post.PostGroupReplyRequest">
        UPDATE groupreply
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            groupreply = #{groupreplyid}
    </update>



    <!-- 단체 답글 정보 삭제 -->
    <delete id="deleteGroupReply" >
        DELETE
        FROM
            groupreply
        where groupreplyid = #{groupreplyid}
    </delete>


    <!-- 개인 댓글 작성자 아이디 조회  -->
    <select id="findIndiCommentsId" resultType="com.project.ribbon.domain.post.PostIndiCommentsIdResponse">
        SELECT
            individualcommentsid
        FROM
            individualcomments
        order by individualcommentsid desc limit 1
    </select>
    <!-- 개인 댓글 정보 조회  -->
    <select id="findByIndiInherentId" resultType="com.project.ribbon.domain.post.PostIndiCommentsResponse">
        select
            description,individualcomments.userid,user.nickname,inherentid,
            writedate,likedcount,individualcommentsid,isrecomment,profileimage
        from individualcomments
        left join user
        on user.userid = individualcomments.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 개인 댓글 작성 -->
    <insert id="saveIndiComments" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest"
            useGeneratedKeys="true" keyProperty="individualcommentsid">
        INSERT INTO individualcomments (
        <include refid="postIndividualCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , 0
        , #{commentsid}
        , 2
        )

    </insert>

    <!-- 개인 댓글 갯수 카운트 +1 -->
    <update id="updateIndiCommentsCount" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">

        update individualwrite set commentcount = commentcount + 1 where individualid = #{inherentid}

    </update>
    <!-- 개인 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteIndiCommentsCount" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">

        update individualwrite set commentcount = commentcount - 1 where individualid = #{inherentid}

    </update>

    <!-- 개인 댓글 수정 -->
    <update id="updateIndiComments" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">
        UPDATE individualcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            individualcommentsid = #{individualcommentsid}
    </update>


    <!-- 개인 댓글 정보 삭제 -->
    <delete id="deleteIndiComments" >
        DELETE
        FROM
            individualcomments
        where individualcommentsid = #{individualcommentsid}
    </delete>

    <!-- 개인 답글 작성자 아이디 조회  -->
    <select id="findIndiReplyId" resultType="com.project.ribbon.domain.post.PostIndiReplyIdResponse">
        SELECT
            individualreplyid
        FROM
            individualreply
        order by individualreplyid desc limit 1
    </select>
    <!-- 개인 답글 정보 조회  -->
    <select id="findByIndiReplyInherentId" resultType="com.project.ribbon.domain.post.PostIndiReplyResponse">
        select
            description,writedate,individualreply.userid,user.nickname,
            inherentid,likedcount,individualreplyid,inherentcommentsid,isrecomment,
            profileimage
        from individualreply
        left join user
        on user.userid = individualreply.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 개인 답글 작성 -->
    <insert id="saveIndiReply" parameterType="com.project.ribbon.domain.post.PostIndiReplyRequest"
            useGeneratedKeys="true" keyProperty="individualreplyid">
        INSERT INTO individualreply (
        <include refid="postIndividualReplyColumns" />
        ) VALUES (
        #{description}
        , #{writedate}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , 0
        , #{individualreplyid}
        , #{inherentcommentsid}
        , 1
        )

    </insert>

    <!-- 개인 답글 갯수 카운트 +1 -->
    <update id="updateIndiReplyCount" parameterType="com.project.ribbon.domain.post.PostIndiReplyRequest">

        update individualwrite set commentcount = commentcount + 1 where individualid = #{inherentid}

    </update>
    <!-- 개인 답글 갯수 카운트 -1 -->
    <update id="updateDeleteIndiReplyCount" parameterType="com.project.ribbon.domain.post.PostIndiReplyRequest">

        update individualwrite set commentcount = commentcount - 1 where individualid = #{inherentid}

    </update>

    <!-- 개인 답글 수정 -->
    <update id="updateIndiReply" parameterType="com.project.ribbon.domain.post.PostIndiReplyRequest">
        UPDATE individualreply
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            individualreply = #{individualreplyid}
    </update>



    <!-- 개인 답글 정보 삭제 -->
    <delete id="deleteIndiReply" >
        DELETE
        FROM
            individualreply
        where individualreplyid = #{individualreplyid}
    </delete>


    <!-- 중고 댓글 작성자 아이디 조회  -->
    <select id="findUsedCommentsId" resultType="com.project.ribbon.domain.post.PostUsedCommentsIdResponse">
        SELECT
            usedcommentsid
        FROM
            usedcomments
        order by usedcommentsid desc limit 1
    </select>
    <!-- 중고 댓글 정보 조회  -->
    <select id="findByUsedInherentId" resultType="com.project.ribbon.domain.post.PostUsedCommentsResponse">
        select
            description,usedcomments.userid,user.nickname,inherentid,
            writedate,likedcount,usedcommentsid,isrecomment,profileimage
        from usedcomments
        left join user
        on user.userid = usedcomments.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 중고 댓글 작성 -->
    <insert id="saveUsedComments" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest"
            useGeneratedKeys="true" keyProperty="usedcommentsid">
        INSERT INTO usedcomments (
        <include refid="postUsedCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , 0
        , #{usedcommentsid}
        , 2
        )

    </insert>

    <!-- 중고 댓글 갯수 카운트 +1 -->
    <update id="updateUsedCommentsCount" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">

        update usedwrite set commentcount = commentcount + 1 where usedid = #{inherentid}

    </update>
    <!-- 중고 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteUsedCommentsCount" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">

        update usedwrite set commentcount = commentcount - 1 where usedid = #{inherentid}

    </update>

    <!-- 중고 댓글 수정 -->
    <update id="updateUsedComments" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">
        UPDATE usedcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            usedcommentsid = #{usedcommentsid}
    </update>


    <!-- 중고 댓글 정보 삭제 -->
    <delete id="deleteUsedComments" >
        DELETE
        FROM
            usedcomments
        where usedcommentsid = #{usedcommentsid}
    </delete>

    <!-- 중고 답글 작성자 아이디 조회  -->
    <select id="findUsedReplyId" resultType="com.project.ribbon.domain.post.PostUsedReplyIdResponse">
        SELECT
            usedreplyid
        FROM
            usedreply
        order by usedreplyid desc limit 1
    </select>
    <!-- 중고 답글 정보 조회  -->
    <select id="findByUsedReplyInherentId" resultType="com.project.ribbon.domain.post.PostUsedReplyResponse">
        select
            description,writedate,usedreply.userid,user.nickname,
            inherentid,likedcount,usedreplyid,inherentcommentsid,isrecomment,
            profileimage
        from usedreply
        left join user
        on user.userid = usedreply.userid
        where inherentid = #{inherentid}
    </select>

    <!-- 중고 답글 작성 -->
    <insert id="saveUsedReply" parameterType="com.project.ribbon.domain.post.PostUsedReplyRequest"
            useGeneratedKeys="true" keyProperty="usedreplyid">
        INSERT INTO usedreply (
        <include refid="postUsedReplyColumns" />
        ) VALUES (
        #{description}
        , #{writedate}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , 0
        , #{usedreplyid}
        , #{inherentcommentsid}
        , 1
        )

    </insert>

    <!-- 중고 답글 갯수 카운트 +1 -->
    <update id="updateUsedReplyCount" parameterType="com.project.ribbon.domain.post.PostUsedReplyRequest">

        update usedwrite set commentcount = commentcount + 1 where usedid = #{inherentid}

    </update>
    <!-- 중고 답글 갯수 카운트 -1 -->
    <update id="updateDeleteUsedReplyCount" parameterType="com.project.ribbon.domain.post.PostUsedReplyRequest">

        update usedwrite set commentcount = commentcount - 1 where usedid = #{inherentid}

    </update>

    <!-- 중고 답글 수정 -->
    <update id="updateUsedReply" parameterType="com.project.ribbon.domain.post.PostUsedReplyRequest">
        UPDATE usedreply
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            usedreply = #{usedreplyid}
    </update>



    <!-- 중고 답글 정보 삭제 -->
    <delete id="deleteUsedReply" >
        DELETE
        FROM
            usedreply
        where usedreplyid = #{usedreplyid}
    </delete>



    <!-- 특정 유저 프로필 조회  -->
    <select id="findById" parameterType="Long" resultType="com.project.ribbon.domain.post.UserInfoResponse">
        SELECT
        nickname,gender,profileimage,userid
        FROM
        user
        WHERE
        userid = #{userid}
    </select>

    <!-- 커뮤니티 내가 쓴 글  -->
    <select id="findByMyUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyBoardResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
                 left join user
                           on user.userid=boardwrite.userid
        WHERE
            boardwrite.userid = #{userid}
    </select>
    <!-- 단체 내가 쓴 글  -->
    <select id="findByMyGroupUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyGroupResponse">
        SELECT
            id,region,title,line,description,peoplenum,
            groupwrite.gender,minage,titleimage,groupwrite.userid,maxage,
            writedate,peoplenownum,user.nickname,groupid,once,commentcount,profileimage
        FROM
            groupwrite
        left join user
        on user.userid = groupwrite.userid
        WHERE
            groupwrite.userid = #{userid}
    </select>
    <!-- 개인 내가 쓴 글  -->
    <select id="findByMyIndividualUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyIndiResponse">
        SELECT
            id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage
        FROM
            individualwrite
                left join user
                          on user.userid = individualwrite.userid
        WHERE
            individualwrite.userid = #{userid}
    </select>
    <!-- 중고 내가 쓴 글  -->
    <select id="findByMyUsedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyUsedResponse">
        SELECT
           id,region,title,description,usedimage1,price,usedwrite.userid,
           writedate,user.nickname,usedid,usedimage2,usedimage3,usedimage4,
           usedimage5,likedcount,commentcount,profileimage
        FROM
            usedwrite
        left join user
        on user.userid = usedwrite.userid
        WHERE
            usedwrite.userid = #{userid}
    </select>
    <!-- 내가 좋아요 누른 글 커뮤니티 -->
    <select id="findByMyLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyLikedResponse">
        select
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        from boardwrite
            left join liked
           on liked.inherentid=boardwrite.boardid
            left join user
            on user.userid = boardwrite.userid
            where liked.userid = #{userid}
    </select>
    <!-- 내가 좋아요 누른 글 개인 -->
    <select id="findByMyIndividualLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyIndividualLikedResponse">
        SELECT
            id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage
        FROM
            individualwrite
                left join individualliked
                    on individualliked.inherentid=individualwrite.individualid
                left join user
                    on user.userid = individualwrite.userid
        where individualliked.userid = #{userid}
    </select>
    <!-- 내가 좋아요 누른 글 중고 -->
    <select id="findByMyUsedLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyUsedLikedResponse">
        SELECT
            id,region,title,description,usedimage1,price,usedwrite.userid,
            writedate,user.nickname,usedid,usedimage2,usedimage3,usedimage4,
            usedimage5,likedcount,commentcount,profileimage
        FROM
            usedwrite
                left join usedliked
                    on usedliked.inherentid=usedwrite.usedid
                left join user
                    on user.userid = usedwrite.userid
        where usedliked.userid = #{userid}
    </select>

</mapper>
