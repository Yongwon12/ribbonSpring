<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.ribbon.mapper.PostMapper">

    <!-- boardwrite 테이블 전체 컬럼 -->
    <sql id="postColumns">
        id
        , userid
        , title
        , description
        , img
        , writedate
        , nickname
        , boardid
        , likedcount
        , commentcount
        , inquirycount

    </sql>

    <!-- groupwrite 테이블 전체 컬럼 -->
    <sql id="postGroupColumns">
        id
        , region
        , title
        , line
        , description
        , peoplenum
        , gender
        , minage
        , titleimage
        , userid
        , maxage
        , writedate
        , peoplenownum
        , nickname
        , groupid
        , once
        , commentcount
        , inquirycount
    </sql>

    <!-- individualwrite 테이블 전체 컬럼 -->
    <sql id="postIndiColumns">
        id
        , region
        , meetdate
        , title
        , description
        , gender
        , userid
        , writedate
        , maxage
        , minage
        , nickname
        , individualid
        , likedcount
        , commentcount
        , inquirycount
    </sql>

    <!-- usedwrite 테이블 전체 컬럼 -->
    <sql id="postUsedColumns">
        id
        , region
        , title
        , description
        , usedimage1
        , price
        , userid
        , writedate
        , nickname
        , usedid
        , usedimage2
        , usedimage3
        , usedimage4
        , usedimage5
        , likedcount
        , commentcount
        , inquirycount
    </sql>

    <!-- User 테이블 전체 컬럼 -->
    <sql id="postUserColumns">
        userid
        , username
        , sns
        , email
        , nickname
        , mobile
        , createdate
        , modifydate
        , birth
        , profileimage
        , gender
        , bestcategory
        , shortinfo
        <!--, youtube-->
        , token
        , password
    </sql>

    <!-- liked 테이블 전체 컬럼 -->
    <sql id="postLikedColumns">
        categoryid
        , nickname
        , inherentid
            , id
            , userid
            , myid
    </sql>

    <!-- comments 테이블 전체 컬럼 -->
    <sql id="postCommentsColumns">
        description
        , userid
        , nickname
        , categoryid
        , inherentid
        , writedate
        , commentsid
        , commentscategory
    </sql>

    <!-- groupcomments 테이블 전체 컬럼 -->
    <sql id="postGroupCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , commentsid
            , commentscategory
    </sql>

    <!-- individualcomments 테이블 전체 컬럼 -->
    <sql id="postIndividualCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , commentsid
            , commentscategory
    </sql>

    <!-- usedcomments 테이블 전체 컬럼 -->
    <sql id="postUsedCommentsColumns">
        description
        , userid
        , nickname
        , inherentid
        , writedate
        , commentsid
            , commentscategory
    </sql>

    <!-- chatroom 테이블 전체 컬럼 -->
    <sql id="postChatRoomColumns">
        id
        , roomname
        , myid
        , yourid
        , mynickname
        , yournickname
        , myprofileimage
            , yourprofileimage
    </sql>

    <!-- 커뮤니티 게시글 저장 -->
    <insert id="save" parameterType="com.project.ribbon.domain.post.PostRequest"
            useGeneratedKeys="true" keyProperty="boardid">
        INSERT INTO boardwrite (
        <include refid="postColumns" />
        ) VALUES (
        #{id}
        , #{userid}
        , #{title}
        , #{description}
        , #{img}
        , #{writedate}
        , #{nickname}
        , #{boardid}
        , 0
        , 0
        , 0
        )
    </insert>


    <!-- 커뮤니티 게시글 수정 -->
    <update id="update" parameterType="com.project.ribbon.domain.post.PostRequest">
        UPDATE boardwrite
        SET
            title = #{title}
          , description = #{description}
          , img = #{img}
          , writedate = #{writedate}
          , profileimage = #{profileimage}
        WHERE
            boardid = #{boardid}
    </update>


    <!-- 커뮤니티 게시글  조회 -->
    <select id="findAll" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,user.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage,token,inquirycount
        FROM boardwrite
                 LEFT JOIN user
                           ON user.userid = boardwrite.userid
        WHERE user.userid IS NOT NULL
        ORDER BY writedate DESC
    </select>

    <!-- 커뮤니티 특정 게시글 조회  -->
    <select id="findOne" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT
            id,user.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage,token,inquirycount
        FROM boardwrite
                 LEFT JOIN user
                           ON user.userid = boardwrite.userid
        WHERE boardid = #{boardid}
          AND user.userid IS NOT NULL
    </select>
    <!-- 커뮤니티 특정 게시글 조회수 카운트 +1 -->
    <update id="updateBoardInquiry" parameterType="com.project.ribbon.domain.post.PostResponse">

        UPDATE boardwrite SET inquirycount = inquirycount + 1 WHERE boardid = #{boardid}

    </update>


    <!-- 커뮤니티 게시글 삭제 -->
    <delete id="deleteById" >
        DELETE
                FROM
                boardwrite
                WHERE boardid = #{boardid}
    </delete>
    <delete id="deleteBoardWriteByLikedId" >
        DELETE
                FROM
                liked
                WHERE inherentid = #{boardid}
    </delete>
    <delete id="deleteBoardWriteComments" >
        DELETE
                FROM
                comments
                WHERE inherentid = #{boardid}
    </delete>

    <!-- 단체 게시글 조회  -->
    <select id="findGroupAll" resultType="com.project.ribbon.domain.post.PostGroupResponse" >
        SELECT
            id,region,title,line,description,peoplenum,groupwrite.gender,minage,titleimage,
            groupwrite.userid,maxage,writedate,peoplenownum,user.nickname,groupid,once,commentcount,token,profileimage,inquirycount
        FROM
            groupwrite
                LEFT JOIN user
                          ON user.userid = groupwrite.userid
        WHERE user.userid IS NOT NULL
        ORDER BY writedate DESC
    </select>

    <!-- 단체 특정 게시글 조회  -->
    <select id="findGroupOne" resultType="com.project.ribbon.domain.post.PostGroupResponse">
        SELECT
            id,region,title,line,description,peoplenum,groupwrite.gender,minage,titleimage,
            groupwrite.userid,maxage,writedate,peoplenownum,user.nickname,groupid,once,commentcount,token,profileimage,inquirycount
        FROM
            groupwrite
                LEFT JOIN user
                          ON user.userid = groupwrite.userid
        WHERE groupid = #{groupid}
          AND user.userid IS NOT NULL
    </select>
    <!-- 단체 특정 게시글 조회수 카운트 +1 -->
    <update id="updateGroupInquiry" parameterType="com.project.ribbon.domain.post.PostGroupResponse">

        UPDATE groupwrite SET inquirycount = inquirycount + 1 WHERE groupid = #{groupid}

    </update>

    <!-- 단체 게시글 저장 -->
    <insert id="saveGroup" parameterType="com.project.ribbon.domain.post.PostGroupRequest"
            useGeneratedKeys="true" keyProperty="groupid">
        INSERT INTO groupwrite (
        <include refid="postGroupColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{title}
        , #{line}
        , #{description}
        , #{peoplenum}
        , #{gender}
        , #{minage}
        , #{titleimage}
        , #{userid}
        , #{maxage}
        , #{writedate}
        , #{peoplenownum}
        , #{nickname}
        , #{groupid}
        , #{once}
        , 0
        , 0
        )
    </insert>

    <!-- 단체 게시글 수정 -->
    <update id="updateGroup" parameterType="com.project.ribbon.domain.post.PostGroupRequest">
        UPDATE groupwrite
        SET
            region = #{region}
          , title = #{title}
          , line = #{line}
          , description = #{description}
          , peoplenum = #{peoplenum}
          , minage = #{minage}
          , titleimage = #{titleimage}
          , maxage = #{maxage}
          , writedate = #{writedate}
          , peoplenownum = #{peoplenownum}
          , once = #{once}
        WHERE
            groupid = #{groupid}
    </update>

    <!-- 단체 게시글 삭제 -->
    <delete id="deleteByGroupId" >
        DELETE
                FROM
                groupwrite
                WHERE groupid = #{groupid}
    </delete>
    <delete id="deleteGroupWriteComments" >
        DELETE
                FROM
                groupcomments
                WHERE inherentid = #{groupid}
    </delete>


    <!-- 개인 게시글 조회  -->
    <select id="findIndiAll" resultType="com.project.ribbon.domain.post.PostIndiResponse">
        SELECT
            id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage,token,inquirycount
        FROM
            individualwrite
                LEFT JOIN user
                          ON user.userid = individualwrite.userid
        WHERE user.userid IS NOT NULL
        ORDER BY writedate DESC
    </select>

    <!-- 개인 특정 게시글 조회  -->
    <select id="findIndiOne" resultType="com.project.ribbon.domain.post.PostIndiResponse">
        SELECT
            id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage,token,inquirycount
        FROM
            individualwrite
                LEFT JOIN user
                          ON user.userid = individualwrite.userid
        WHERE individualid = #{individualid}
          AND user.userid IS NOT NULL
    </select>
    <!-- 개인 특정 게시글 조회수 카운트 +1 -->
    <update id="updateIndiInquiry" parameterType="com.project.ribbon.domain.post.PostIndiResponse">

        UPDATE individualwrite SET inquirycount = inquirycount + 1 WHERE individualid = #{individualid}

    </update>

    <!-- 개인 게시글 저장 -->
    <insert id="saveIndi" parameterType="com.project.ribbon.domain.post.PostIndiRequest"
            useGeneratedKeys="true" keyProperty="individualid">
        INSERT INTO individualwrite (
        <include refid="postIndiColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{meetdate}
        , #{title}
        , #{description}
        , #{gender}
        , #{userid}
        , #{writedate}
        , #{maxage}
        , #{minage}
        , #{nickname}
        , #{individualid}
        , 0
        , 0
        , 0
        )
    </insert>

    <!-- 개인 게시글 수정 -->
    <update id="updateIndi" parameterType="com.project.ribbon.domain.post.PostIndiRequest">
        UPDATE individualwrite
        SET
            region = #{region}
          , meetdate = #{meetdate}
          , title = #{title}
          , description = #{description}
          , writedate = #{writedate}
          , maxage = #{maxage}
          , minage = #{minage}
        WHERE
            individualid = #{individualid}
    </update>


    <!-- 개인 게시글 삭제 -->
    <delete id="deleteByIndiId" >
        DELETE
                FROM
                individualwrite
                WHERE individualid = #{individualid}
    </delete>
    <delete id="deleteIndiWriteByLikedId" >
        DELETE
                FROM
                individualliked
                WHERE inherentid = #{individualid}
    </delete>
    <delete id="deleteIndiWriteComments" >
        DELETE
                FROM
                individualcomments
                WHERE inherentid = #{individualid}
    </delete>

    <!-- 중고 게시글 조회  -->
    <select id="findUsedAll" resultType="com.project.ribbon.domain.post.PostUsedResponse">
        SELECT
            id,region,title,description,usedimage1,price,user.userid,writedate,user.nickname,
            usedid,usedimage2,usedimage3,usedimage4,usedimage5,likedcount,commentcount,token,profileimage,inquirycount
        FROM
            usedwrite
                LEFT JOIN user
                          ON user.userid = usedwrite.userid
        WHERE user.userid IS NOT NULL
        ORDER BY writedate DESC
    </select>

    <!-- 중고 특정 게시글 조회  -->
    <select id="findUsedOne" resultType="com.project.ribbon.domain.post.PostUsedResponse">
        SELECT
            id,region,title,description,usedimage1,price,user.userid,writedate,user.nickname,
            usedid,usedimage2,usedimage3,usedimage4,usedimage5,likedcount,commentcount,token,profileimage,inquirycount
        FROM
            usedwrite
                LEFT JOIN user
                          ON user.userid = usedwrite.userid
        WHERE usedid = #{usedid}
          AND user.userid IS NOT NULL
    </select>
    <!-- 중고 특정 게시글 조회수 카운트 +1 -->
    <update id="updateUsedInquiry" parameterType="com.project.ribbon.domain.post.PostUsedResponse">

        UPDATE usedwrite SET inquirycount = inquirycount + 1 WHERE usedid = #{usedid}

    </update>

    <!-- 중고 게시글 저장 -->
    <insert id="saveUsed" parameterType="com.project.ribbon.domain.post.PostUsedRequest"
            useGeneratedKeys="true" keyProperty="usedid">
        INSERT INTO usedwrite (
        <include refid="postUsedColumns" />
        ) VALUES (
        #{id}
        , #{region}
        , #{title}
        , #{description}
        , #{usedimage1}
        , #{price}
        , #{userid}
        , #{writedate}
        , #{nickname}
        , #{usedid}
        , #{usedimage2}
        , #{usedimage3}
        , #{usedimage4}
        , #{usedimage5}
        , 0
        , 0
        , 0
        )
    </insert>

    <!-- 중고 게시글 수정 -->
    <update id="updateUsed" parameterType="com.project.ribbon.domain.post.PostUsedRequest">
        UPDATE usedwrite
        SET
            region = #{region}
          , title = #{title}
          , description = #{description}
          , usedimage1 = #{usedimage1}
          , price = #{price}
          , writedate = #{writedate}
          , usedimage2 = #{usedimage2}
          , usedimage3 = #{usedimage3}
          , usedimage4 = #{usedimage4}
          , usedimage5 = #{usedimage5}
        WHERE
            usedid = #{usedid}
    </update>

    <!-- 중고 게시글 삭제 -->
    <delete id="deleteByUsedId" >
        DELETE
                FROM
                usedwrite
                where usedid = #{usedid}
    </delete>
    <delete id="deleteUsedWriteByLikedId" >
        DELETE
                FROM
                usedliked
                WHERE inherentid = #{usedid}
    </delete>
    <delete id="deleteUsedWriteComments" >
        DELETE
                FROM
                usedcomments
                WHERE inherentid = #{usedid}
    </delete>


    <!-- 기존 유저 정보 조회  -->
    <select id="findUserInfoAll" resultType="com.project.ribbon.domain.post.PostUserRequest">
        SELECT *
        FROM user
        WHERE email = #{email}
    </select>

    <!-- 유저 권한 조회  -->
    <select id="findUserRolesInfoAll" resultType="com.project.ribbon.domain.post.PostUserRequest">
        SELECT roles
        FROM user_roles
        WHERE email = #{email}
    </select>


    <!-- 유저 가입 -->
    <insert id="saveUser" parameterType="com.project.ribbon.domain.post.PostUserRequest"
            useGeneratedKeys="true" keyProperty="userid" >
        INSERT INTO user (
        <include refid="postUserColumns" />
        ) VALUES(
        #{userid}
        , #{username}
        , #{sns}
        , #{email}
        , #{nickname}
        , #{mobile}
        , #{createdate}
        , #{modifydate}
        , #{birth}
        , #{profileimage}
        , #{gender}
        , #{bestcategory}
        , #{shortinfo}
        <!--, #{youtube}-->
        , #{token}
        , #{password})
        ON DUPLICATE KEY UPDATE
        token = VALUES(token),
        password = VALUES(password)

        <selectKey keyProperty="userid" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 유저 가입 -->
    <insert id="saveUserRoles" parameterType="com.project.ribbon.domain.post.PostUserRequest"
    >
        INSERT INTO user_roles (
            user_userid,roles,email
        ) VALUES (
                     #{userid}
                 , "USER"
                 , #{email})
            ON DUPLICATE KEY UPDATE
                                 roles = VALUES(roles)

    </insert>


    <!-- 유저 프로필 수정 -->
    <update id="updateUser" parameterType="com.project.ribbon.domain.post.PostUserUpdateRequest">
        UPDATE user
        SET
        sns = #{sns}
        , nickname = #{nickname}
        , modifydate = #{modifydate}
        , bestcategory = #{bestcategory}
        , shortinfo = #{shortinfo}
        <!--, youtube = #{youtube}-->
        , profileimage = #{profileimage}
        WHERE
        userid = #{userid}
    </update>

    <!-- 유저 프로필 수정 -->
    <update id="updateInstructorUser" parameterType="com.project.ribbon.domain.post.PostInstructorUserUpdateRequest">
        UPDATE user_roles
        SET
            roles = "INSTRUCTOR"
        WHERE
            userid = #{userid}
    </update>

    <!-- 유저 수정된 프사 조회  -->
    <select id="findUserImage" resultType="com.project.ribbon.domain.post.PostUserUpdateRequest">
        SELECT
            *
        FROM
            user
        WHERE userid = #{userid}
    </select>


    <!-- 유저 정보 삭제 -->
    <delete id="deleteByUserId" >
        DELETE
                FROM
                user
                WHERE userid = #{userid}
    </delete>

    <!-- 유저 권한 정보 삭제 -->
    <delete id="deleteByUserRolesId" >
        DELETE
                FROM
                user_roles
                WHERE user_userid = #{userid}
    </delete>

    <!-- 실시간 인기글 -->
    <select id="findAll11" resultType="com.project.ribbon.domain.post.PostResponse">
        SELECT *
        FROM (
                 SELECT
                     category.board, boardwrite.id, boardwrite.userid, title, description, img, writedate, user.nickname,
                     boardid, profileimage, token, likedcount, commentcount, inquirycount,
                     @row_number:=CASE WHEN @id=boardwrite.id THEN @row_number+1 ELSE 1 END AS rn,
        @id:=boardwrite.id AS dummy
                 FROM
                     boardwrite
                     LEFT JOIN user ON user.userid = boardwrite.userid
                     LEFT JOIN category ON category.id = boardwrite.id,
                     (SELECT @row_number:=0) AS t,
                     (SELECT @id:=0) AS i
                 WHERE
                     boardwrite.id BETWEEN 1 AND 10
                   AND user.userid is NOT NULL
                   AND likedcount + commentcount + inquirycount > 0 -- 이 부분 나중에 댓글수 5개 이상일때로 고정
                   AND writedate >= (NOW() - INTERVAL '180' MINUTE) -- 3시간 이내에 작성된 글
             ) AS sub
        WHERE
            rn = 1;
    </select>


    <!-- 좋아요 삽입 -->
    <insert id="saveLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO liked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{nickname}
        , #{inherentid}
        , #{id}
        , #{userid}
        , #{myid}
        )
    </insert>

    <!-- 좋아요 알림 조회  -->
    <select id="findLikedAlarm" resultType="com.project.ribbon.domain.post.PostLikedRequest">
        SELECT
            boardliked.categoryid,
            boardwrite.title,
            boardwrite.description,
            liker.nickname,
            boardliked.inherentid,
            boardliked.id
        FROM
            boardwrite
                LEFT JOIN liked AS boardliked
                          ON boardliked.inherentid = boardwrite.boardid
                LEFT JOIN User AS writer
                          ON writer.userid = boardwrite.userid
                LEFT JOIN User AS liker
                          ON liker.userid = boardliked.myid
        WHERE
            writer.userid = #{userid}
          AND liker.nickname IS NOT NULL
        ORDER BY
            boardwrite.writedate DESC LIMIT 1;

    </select>
    <!-- 개인 좋아요 알림 조회  -->
    <select id="findIndividualLikedAlarm" resultType="com.project.ribbon.domain.post.PostIndividualLikedRequest">
        SELECT
            liked.categoryid,
            individualwrite.title,
            individualwrite.description,
            liker.nickname,
            liked.inherentid,
            liked.id
        FROM
            individualwrite
                LEFT JOIN individualliked AS liked
                          ON liked.inherentid = individualwrite.individualid
                LEFT JOIN User AS writer
                          ON writer.userid = individualwrite.userid
                LEFT JOIN User AS liker
                          ON liker.userid = liked.myid
        WHERE
            writer.userid = #{userid}
          AND liker.nickname IS NOT NULL
        ORDER BY
            individualwrite.writedate DESC LIMIT 1;
    </select>
    <!-- 중고 좋아요 알림 조회  -->
    <select id="findUsedLikedAlarm" resultType="com.project.ribbon.domain.post.PostUsedLikedRequest">
        SELECT
            liked.categoryid,
            usedwrite.title,
            usedwrite.description,
            liker.nickname,
            liked.inherentid,
            liked.id
        FROM
            usedwrite
                LEFT JOIN usedliked AS liked
                          ON liked.inherentid = usedwrite.usedid
                LEFT JOIN User AS writer
                          ON writer.userid = usedwrite.userid
                LEFT JOIN User AS liker
                          ON liker.userid = liked.myid
        WHERE
            writer.userid = #{userid}
          AND liker.nickname IS NOT NULL
        ORDER BY
            usedwrite.writedate DESC LIMIT 1;
    </select>


    <!-- 좋아요 갯수 카운트 +1 -->
    <update id="updateLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest">

        UPDATE boardwrite SET likedcount = likedcount + 1 WHERE boardid = #{inherentid}

    </update>
    <!-- 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteLiked" parameterType="com.project.ribbon.domain.post.PostLikedRequest">

        UPDATE boardwrite SET likedcount = likedcount - 1 WHERE boardid = #{inherentid}

    </update>


    <!-- 좋아요 삭제 -->
    <delete id="deleteByLikedId" >
        DELETE
                FROM
                liked
                WHERE categoryid = #{categoryid}
                AND nickname = #{nickname}
                AND inherentid = #{inherentid}
                AND userid = #{userid}
    </delete>


    <!-- 개인 좋아요 삽입 -->
    <insert id="saveIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO individualliked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{nickname}
        , #{inherentid}
        , #{id}
        , #{userid}
        , #{myid}
        )

    </insert>


    <!-- 개인 좋아요 갯수 카운트 +1 -->
    <update id="updateIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest">

        UPDATE individualwrite SET likedcount = likedcount + 1 WHERE individualid = #{inherentid}

    </update>
    <!-- 개인 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteIndividualLiked" parameterType="com.project.ribbon.domain.post.PostIndividualLikedRequest">

        UPDATE individualwrite SET likedcount = likedcount - 1 WHERE individualid = #{inherentid}

    </update>

    <!-- 개인 좋아요 삭제 -->
    <delete id="deleteByIndividualLikedId" >
        DELETE
                FROM
                individualliked
                WHERE categoryid = #{categoryid}
                AND nickname = #{nickname}
                AND inherentid = #{inherentid}
                AND userid = #{userid}
    </delete>


    <!-- 중고 좋아요 삽입 -->
    <insert id="saveUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO usedliked (
        <include refid="postLikedColumns" />
        ) VALUES (
        #{categoryid}
        , #{nickname}
        , #{inherentid}
        , #{id}
        , #{userid}
        , #{myid}
        )
    </insert>


    <!-- 중고 좋아요 갯수 카운트 +1 -->
    <update id="updateUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest">

        UPDATE usedwrite SET likedcount = likedcount + 1 WHERE usedid = #{inherentid}

    </update>
    <!-- 중고 좋아요 갯수 카운트 -1 -->
    <update id="updateDeleteUsedLiked" parameterType="com.project.ribbon.domain.post.PostUsedLikedRequest">

        UPDATE usedwrite SET likedcount = likedcount - 1 WHERE usedid = #{inherentid}

    </update>


    <!-- 중고 좋아요 삭제 -->
    <delete id="deleteByUsedLikedId" >
        DELETE
                FROM
                usedliked
                WHERE categoryid = #{categoryid}
                AND nickname = #{nickname}
                AND inherentid = #{inherentid}
                AND userid = #{userid}
    </delete>

    <!-- 커뮤니티 댓글 알림 조회  -->
    <select id="findCommentsAlarm" resultType="com.project.ribbon.domain.post.PostCommentsRequest">
        SELECT
            comments.categoryid,
            boardwrite.title,
            comments.description,
            commenter.nickname,
            comments.inherentid,
            comments.commentscategory
        FROM
            boardwrite
                LEFT JOIN comments
                          ON comments.inherentid = boardwrite.boardid
                LEFT JOIN user AS writer
                          ON writer.userid = boardwrite.userid
                LEFT JOIN user AS commenter
                          ON commenter.userid = comments.userid
        WHERE
            writer.userid = #{userid}
          AND commenter.nickname IS NOT NULL
        ORDER BY
            comments.writedate DESC LIMIT 1;

    </select>
    <!-- 개인 댓글 알림 조회  -->
    <select id="findIndiCommentsAlarm" resultType="com.project.ribbon.domain.post.PostIndiCommentsRequest">
        SELECT
            individualwrite.title,
            individualcomments.description,
            commenter.nickname,
            individualcomments.inherentid,
            individualcomments.commentscategory
        FROM
            individualwrite
                LEFT JOIN individualcomments
                          ON individualcomments.inherentid = individualwrite.individualid
                LEFT JOIN user AS writer
                          ON writer.userid = individualwrite.userid
                LEFT JOIN user AS commenter
                          ON commenter.userid = individualcomments.userid
        WHERE
            writer.userid = #{userid}
          AND commenter.nickname IS NOT NULL
        ORDER BY
            individualcomments.writedate DESC LIMIT 1;
    </select>
    <!-- 단체 댓글 알림 조회  -->
    <select id="findGroupCommentsAlarm" resultType="com.project.ribbon.domain.post.PostGroupCommentsRequest">
        SELECT
            groupwrite.title,
            groupcomments.description,
            commenter.nickname,
            groupcomments.inherentid,
            groupcomments.commentscategory
        FROM
            groupwrite
                LEFT JOIN groupcomments
                          ON groupcomments.inherentid = groupwrite.groupid
                LEFT JOIN user AS writer
                          ON writer.userid = groupwrite.userid
                LEFT JOIN user AS commenter
                          ON commenter.userid = groupcomments.userid
        WHERE
            writer.userid = #{userid}
          AND commenter.nickname IS NOT NULL
        ORDER BY
            groupcomments.writedate DESC LIMIT 1;
    </select>
    <!-- 중고 댓글 알림 조회  -->
    <select id="findUsedCommentsAlarm" resultType="com.project.ribbon.domain.post.PostUsedCommentsRequest">
        SELECT
            usedwrite.title,
            usedcomments.description,
            commenter.nickname,
            usedcomments.inherentid,
            usedcomments.commentscategory
        FROM
            usedwrite
                LEFT JOIN usedcomments
                          ON usedcomments.inherentid = usedwrite.usedid
                LEFT JOIN user AS writer
                          ON writer.userid = usedwrite.userid
                LEFT JOIN user AS commenter
                          ON commenter.userid = usedcomments.userid
        WHERE
            writer.userid = #{userid}
          AND commenter.nickname IS NOT NULL
        ORDER BY
            usedcomments.writedate DESC LIMIT 1;
    </select>

    <!-- 댓글 작성자 아이디 조회  -->
    <select id="findCommentsId" resultType="com.project.ribbon.domain.post.PostCommentsIdResponse">
        SELECT
            commentsid
        FROM
            comments
        ORDER BY commentsid DESC limit 1
    </select>


    <!-- 댓글 정보 조회  -->
    <select id="findByInherentId" resultType="com.project.ribbon.domain.post.PostCommentsResponse">
        SELECT
            description,writedate,comments.userid,user.nickname,categoryid,
            inherentid,commentsid,user.profileimage
        FROM comments
                 LEFT JOIN user
                           ON user.userid = comments.userid
        WHERE inherentid = #{inherentid}
          AND user.userid IS NOT NULL
    </select>


    <!-- 댓글 작성 -->
    <insert id="saveComments" parameterType="com.project.ribbon.domain.post.PostCommentsRequest"
            useGeneratedKeys="true" keyProperty="commentsid">
        INSERT INTO comments (
        <include refid="postCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{categoryid}
        , #{inherentid}
        , #{writedate}
        , #{commentsid}
        , #{commentscategory}
        )

    </insert>


    <!-- 댓글 갯수 카운트 +1 -->
    <update id="updateCommentsCount" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">

        UPDATE boardwrite SET commentcount = commentcount + 1 WHERE boardid = #{inherentid}

    </update>
    <!-- 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteCommentsCount" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">

        UPDATE boardwrite SET commentcount = commentcount - 1 WHERE boardid = #{inherentid}

    </update>


    <!-- 댓글 수정 -->
    <update id="updateComments" parameterType="com.project.ribbon.domain.post.PostCommentsRequest">
        UPDATE comments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            commentsid = #{commentsid}
    </update>


    <!-- 댓글 정보 삭제 -->
    <delete id="deleteComments" >
        DELETE
                FROM
                comments
                WHERE commentsid = #{commentsid}
    </delete>



    <!-- 단체 댓글 작성자 아이디 조회  -->
    <select id="findGroupCommentsId" resultType="com.project.ribbon.domain.post.PostGroupCommentsIdResponse">
        SELECT
            commentsid
        FROM
            groupcomments
        ORDER BY commentsid DESC limit 1
    </select>


    <!-- 단체 댓글 정보 조회  -->
    <select id="findByGroupCommentsInherentId" resultType="com.project.ribbon.domain.post.PostGroupCommentsResponse">
        SELECT
            description,groupcomments.userid,user.nickname,inherentid,
            writedate,commentsid,user.profileimage
        FROM groupcomments
                 LEFT JOIN user
                           ON user.userid = groupcomments.userid
        WHERE inherentid = #{inherentid}
          AND user.userid IS NOT NULL
    </select>


    <!-- 단체 댓글 작성 -->
    <insert id="saveGroupComments" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest"
            useGeneratedKeys="true" keyProperty="commentsid">
        INSERT INTO groupcomments (
        <include refid="postGroupCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , #{commentsid}
        , #{commentscategory}
        )

    </insert>


    <!-- 단체 댓글 갯수 카운트 +1 -->
    <update id="updateGroupCommentsCount" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">

        UPDATE groupwrite SET commentcount = commentcount + 1 WHERE groupid = #{inherentid}

    </update>
    <!-- 단체 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteGroupCommentsCount" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">

        UPDATE groupwrite SET commentcount = commentcount - 1 WHERE groupid = #{inherentid}

    </update>


    <!-- 단체 댓글 수정 -->
    <update id="updateGroupComments" parameterType="com.project.ribbon.domain.post.PostGroupCommentsRequest">
        UPDATE groupcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            commentsid = #{commentsid}
    </update>


    <!-- 단체 댓글 정보 삭제 -->
    <delete id="deleteGroupComments" >
        DELETE
                FROM
                groupcomments
                WHERE commentsid = #{commentsid}
    </delete>


    <!-- 개인 댓글 작성자 아이디 조회  -->
    <select id="findIndiCommentsId" resultType="com.project.ribbon.domain.post.PostIndiCommentsIdResponse">
        SELECT
            commentsid
        FROM
            individualcomments
        ORDER BY commentsid DESC limit 1
    </select>



    <!-- 개인 댓글 정보 조회  -->
    <select id="findByIndiCommentsInherentId" resultType="com.project.ribbon.domain.post.PostIndiCommentsResponse">
        SELECT
            description,individualcomments.userid,user.nickname,inherentid,
            writedate,commentsid,user.profileimage
        FROM individualcomments
                 LEFT JOIN user
                           ON user.userid = individualcomments.userid
        WHERE inherentid = #{inherentid}
          AND user.userid IS NOT NULL
    </select>


    <!-- 개인 댓글 작성 -->
    <insert id="saveIndiComments" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest"
            useGeneratedKeys="true" keyProperty="commentsid">
        INSERT INTO individualcomments (
        <include refid="postIndividualCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , #{commentsid}
        , #{commentscategory}
        )

    </insert>

    <!-- 개인 댓글 갯수 카운트 +1 -->
    <update id="updateIndiCommentsCount" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">

        UPDATE individualwrite SET commentcount = commentcount + 1 WHERE individualid = #{inherentid}

    </update>
    <!-- 개인 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteIndiCommentsCount" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">

        UPDATE individualwrite SET commentcount = commentcount - 1 WHERE individualid = #{inherentid}

    </update>

    <!-- 개인 댓글 수정 -->
    <update id="updateIndiComments" parameterType="com.project.ribbon.domain.post.PostIndiCommentsRequest">
        UPDATE individualcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            commentsid = #{commentsid}
    </update>


    <!-- 개인 댓글 정보 삭제 -->
    <delete id="deleteIndiComments" >
        DELETE
                FROM
                individualcomments
                WHERE commentsid = #{commentsid}
    </delete>


    <!-- 중고 댓글 작성자 아이디 조회  -->
    <select id="findUsedCommentsId" resultType="com.project.ribbon.domain.post.PostUsedCommentsIdResponse">
        SELECT
            commentsid
        FROM
            usedcomments
        ORDER BY commentsid DESC limit 1
    </select>


    <!-- 중고 댓글 정보 조회  -->
    <select id="findByUsedCommentsInherentId" resultType="com.project.ribbon.domain.post.PostUsedCommentsResponse">
        SELECT
            description,usedcomments.userid,user.nickname,inherentid,
            writedate,commentsid,user.profileimage
        FROM usedcomments
                 LEFT JOIN user
                           ON user.userid = usedcomments.userid
        WHERE inherentid = #{inherentid}
          AND user.userid IS NOT NULL
    </select>


    <!-- 중고 댓글 작성 -->
    <insert id="saveUsedComments" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest"
            useGeneratedKeys="true" keyProperty="commentsid">
        INSERT INTO usedcomments (
        <include refid="postUsedCommentsColumns" />
        ) VALUES (
        #{description}
        , #{userid}
        , #{nickname}
        , #{inherentid}
        , #{writedate}
        , #{commentsid}
        , #{commentscategory}
        )

    </insert>

    <!-- 중고 댓글 갯수 카운트 +1 -->
    <update id="updateUsedCommentsCount" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">

        UPDATE usedwrite SET commentcount = commentcount + 1 WHERE usedid = #{inherentid}

    </update>
    <!-- 중고 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteUsedCommentsCount" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">

        UPDATE usedwrite SET commentcount = commentcount - 1 WHERE usedid = #{inherentid}

    </update>


    <!-- 중고 댓글 수정 -->
    <update id="updateUsedComments" parameterType="com.project.ribbon.domain.post.PostUsedCommentsRequest">
        UPDATE usedcomments
        SET
            description = #{description}
          , nickname = #{nickname}
          , writedate = #{writedate}
        WHERE
            commentsid = #{commentsid}
    </update>


    <!-- 중고 댓글 정보 삭제 -->
    <delete id="deleteUsedComments" >
        DELETE
                FROM
                usedcomments
                WHERE commentsid = #{commentsid}
    </delete>


    <!-- 특정 유저 프로필 조회  -->
    <select id="findById" parameterType="Long" resultType="com.project.ribbon.domain.post.UserInfoResponse">
        SELECT
            userid,nickname,bestcategory,profileimage,shortinfo,sns,youtube,gender
        FROM
            user
        WHERE
            userid = #{userid}
    </select>


    <!-- 커뮤니티 내가 쓴 글  -->
    <select id="findByMyUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyBoardResponse">
        SELECT
            id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        FROM boardwrite
                 LEFT JOIN user
                           ON user.userid=boardwrite.userid
        WHERE
            boardwrite.userid = #{userid}
    </select>


    <!-- 단체 내가 쓴 글  -->
    <select id="findByMyGroupUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyGroupResponse">
        SELECT
            id,region,title,line,description,peoplenum,
            groupwrite.gender,minage,titleimage,groupwrite.userid,maxage,
            writedate,peoplenownum,user.nickname,groupid,once,commentcount,profileimage
        FROM
            groupwrite
                LEFT JOIN user
                          ON user.userid = groupwrite.userid
        WHERE
            groupwrite.userid = #{userid}
    </select>


    <!-- 개인 내가 쓴 글  -->
    <select id="findByMyIndividualUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyIndiResponse">
        SELECT
            id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage
        FROM
            individualwrite
                LEFT JOIN user
                          ON user.userid = individualwrite.userid
        WHERE
            individualwrite.userid = #{userid}
    </select>


    <!-- 중고 내가 쓴 글  -->
    <select id="findByMyUsedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyUsedResponse">
        SELECT
            id,region,title,description,usedimage1,price,usedwrite.userid,
            writedate,user.nickname,usedid,usedimage2,usedimage3,usedimage4,
            usedimage5,likedcount,commentcount,profileimage
        FROM
            usedwrite
                LEFT JOIN user
                          ON user.userid = usedwrite.userid
        WHERE
            usedwrite.userid = #{userid}
    </select>


    <!-- 내가 좋아요 누른 글 커뮤니티 -->
    <select id="findByMyLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyLikedResponse">
        SELECT
            boardwrite.id,boardwrite.userid,title,description,img,writedate,user.nickname,
            boardid,likedcount,commentcount,profileimage
        FROM boardwrite
                 LEFT JOIN liked
                           ON liked.inherentid=boardwrite.boardid
                 LEFT JOIN user
                           ON user.userid = boardwrite.userid
        WHERE liked.userid = #{userid}
    </select>


    <!-- 내가 좋아요 누른 글 개인 -->
    <select id="findByMyIndividualLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyIndividualLikedResponse">
        SELECT
            individualwrite.id,region,meetdate,title,description,individualwrite.gender,
            individualwrite.userid,writedate,maxage,minage,user.nickname,
            individualid,likedcount,commentcount,profileimage
        FROM
            individualwrite
                LEFT JOIN individualliked
                          ON individualliked.inherentid=individualwrite.individualid
                LEFT JOIN user
                          ON user.userid = individualwrite.userid
        WHERE individualliked.userid = #{userid}
    </select>


    <!-- 내가 좋아요 누른 글 중고 -->
    <select id="findByMyUsedLikedUserId" parameterType="Long" resultType="com.project.ribbon.domain.post.PostMyUsedLikedResponse">
        SELECT
            usedwrite.id,region,title,description,usedimage1,price,usedwrite.userid,
            writedate,user.nickname,usedid,usedimage2,usedimage3,usedimage4,
            usedimage5,likedcount,commentcount,profileimage
        FROM
            usedwrite
                LEFT JOIN usedliked
                          ON usedliked.inherentid=usedwrite.usedid
                LEFT JOIN user
                          ON user.userid = usedwrite.userid
        WHERE usedliked.userid = #{userid}
    </select>


    <!-- 채팅방 정보 저장 -->
    <insert id="saveChatRoom" parameterType="com.project.ribbon.domain.post.PostChatRoomRequest"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO chatroom (
        <include refid="postChatRoomColumns" />
        ) VALUES (
        #{id}
        , #{roomname}
        , #{myid}
        , #{yourid}
        , #{mynickname}
        , #{yournickname}
        , #{myprofileimage}
        , #{yourprofileimage}
        )
    </insert>


    <!-- 특정 채팅방 정보 조회  -->
    <select id="findByMyId" parameterType="Integer" resultType="com.project.ribbon.domain.post.PostChatRoomResponse">
        SELECT
            roomname,yourid,yournickname,yourprofileimage,myid,token
        FROM
            chatroom
                LEFT JOIN user
                          ON user.userid = chatroom.yourid
        WHERE
            myid = #{myid}
    </select>


    <!-- 채팅룸 삭제 -->
    <delete id="deleteByRoomName" >
        DELETE
                FROM
                chatroom
                WHERE roomname = #{roomname}
    </delete>


    <!-- 채팅 정보 저장 -->
    <insert id="saveChat" parameterType="com.project.ribbon.domain.post.PostChatMessage">
        INSERT INTO chattable (
            roomname,nickname,message,profileimage,writedate
        ) VALUES (
                     #{roomname}
                 , #{nickname}
                 , #{message}
                 , #{profileimage}
                 , NOW()
                 )
    </insert>


    <!-- 신고 유저 조회 -->
    <select id="findReportUserAll" resultType="com.project.ribbon.domain.post.PostReportUserResponse">
        SELECT *
        FROM reportuser
    </select>

    <!-- 신고 유저 저장 -->
    <insert id="saveReportUser" parameterType="com.project.ribbon.domain.post.PostReportUserResponse">
        INSERT INTO reportuser (
            userid,nickname,description,profileimage
        ) VALUES (
                     #{userid}
                 , #{nickname}
                 , #{description}
                 , #{profileimage}
                 )
    </insert>

    <!-- 신고 커뮤니티글 조회 -->
    <select id="findReportBoardAll" resultType="com.project.ribbon.domain.post.PostReportBoardResponse">
        SELECT
            *
        FROM reportboard

    </select>
    <!-- 신고 커뮤니티  저장 -->
    <insert id="saveReportBoard" parameterType="com.project.ribbon.domain.post.PostReportBoardResponse">
        INSERT INTO reportboard (
            boardid,userid,title,description,img
        ) VALUES (
                     #{boardid}
                 , #{userid}
                 , #{title}
                 , #{description}
                 , #{img}
                 )
    </insert>
    <!-- 신고 개인글 조회 -->
    <select id="findReportIndividualAll" resultType="com.project.ribbon.domain.post.PostReportIndividualResponse">
        SELECT
            *
        FROM reportindividual

    </select>
    <!-- 신고 개인 글 저장 -->
    <insert id="saveReportIndividual" parameterType="com.project.ribbon.domain.post.PostReportIndividualResponse">
        INSERT INTO reportindividual (
            individualid,userid,title,description
        ) VALUES (
                     #{individualid}
                 , #{userid}
                 , #{title}
                 , #{description}
                 )
    </insert>
    <!-- 신고 단체글 조회 -->
    <select id="findReportGroupAll" resultType="com.project.ribbon.domain.post.PostReportGroupResponse">
        SELECT
            *
        FROM reportgroup

    </select>
    <!-- 신고 단체 글 저장 -->
    <insert id="saveReportGroup" parameterType="com.project.ribbon.domain.post.PostReportGroupResponse">
        INSERT INTO reportgroup (
            groupid,userid,title,description,titleimage
        ) VALUES (
                     #{groupid}
                 , #{userid}
                 , #{title}
                 , #{description}
                 , #{titleimage}
                 )
    </insert>
    <!-- 신고 중고글 조회 -->
    <select id="findReportUsedAll" resultType="com.project.ribbon.domain.post.PostReportUsedResponse">
        SELECT
            *
        FROM reportused

    </select>
    <!-- 신고 중고 글 저장 -->
    <insert id="saveReportUsed" parameterType="com.project.ribbon.domain.post.PostReportUsedResponse">
        INSERT INTO reportused (
            usedid,userid,title,description,usedimage1,usedimage2,usedimage3,usedimage4,usedimage5
        ) VALUES (
                     #{usedid}
                 , #{userid}
                 , #{title}
                 , #{description}
                 , #{usedimage1}
                 , #{usedimage2}
                 , #{usedimage3}
                 , #{usedimage4}
                 , #{usedimage5}
                 )
    </insert>
    <!-- 신고 커뮤니티댓글 조회 -->
    <select id="findReportCommentsAll" resultType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        SELECT
            *
        FROM reportcomments

    </select>
    <!-- 신고 커뮤니티 댓글 저장 -->
    <insert id="saveReportComments" parameterType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        INSERT INTO reportcomments (
            commentsid,userid,description,inherentid
        ) VALUES (
                     #{commentsid}
                 , #{userid}
                 , #{description}
                 , #{inherentid}
                 )
    </insert>
    <!-- 신고 개인댓글 조회 -->
    <select id="findReportIndividualCommentsAll" resultType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        SELECT
            *
        FROM reportindividualcomments

    </select>
    <!-- 신고 개인 댓글 저장 -->
    <insert id="saveReportIndividualComments" parameterType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        INSERT INTO reportindividualcomments (
            commentsid,userid,description,inherentid
        ) VALUES (
                     #{commentsid}
                 , #{userid}
                 , #{description}
                 , #{inherentid}
                 )
    </insert>
    <!-- 신고 단체댓글 조회 -->
    <select id="findReportGroupCommentsAll" resultType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        SELECT
            *
        FROM reportgroupcomments

    </select>
    <!-- 신고 단체 댓글 저장 -->
    <insert id="saveReportGroupComments" parameterType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        INSERT INTO reportgroupcomments (
            commentsid,userid,description,inherentid
        ) VALUES (
                     #{commentsid}
                 , #{userid}
                 , #{description}
                 , #{inherentid}
                 )
    </insert>
    <!-- 신고 중고댓글 조회 -->
    <select id="findReportUsedCommentsAll" resultType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        SELECT
            *
        FROM reportusedcomments

    </select>
    <!-- 신고 중고 댓글 저장 -->
    <insert id="saveReportUsedComments" parameterType="com.project.ribbon.domain.post.PostReportCommentsResponse">
        INSERT INTO reportusedcomments (
            commentsid,userid,description,inherentid
        ) VALUES (
                     #{commentsid}
                 , #{userid}
                 , #{description}
                 , #{inherentid}
                 )
    </insert>

    <!-- 신고 관리자페이지 유저 정지  -->
    <update id="updateUserReport" >
        UPDATE
            reportuser
        SET freezing = "FREEZING"
        WHERE userid = #{userid}
    </update>

    <!-- 신고 유저 정지 및 정보 수정 -->
    <update id="updateByReportUserId" >
        UPDATE
            user
        SET profileimage = NULL, shortinfo = NULL
        WHERE userid = #{userid}
    </update>

    <!-- 신고 유저 권한 변경 -->
    <update id="updateByReportUserRolesId" >
        UPDATE
            user_roles
        SET roles = "FREEZINGUSER"
        WHERE user_userid = #{userid}
    </update>

    <!-- 활성화 유저 관리자페이지 삭제 -->
    <delete id="deleteByActivateUserId" >
        DELETE
                FROM
                reportuser
                WHERE userid = #{userid}
    </delete>

    <!-- 활성화 유저 권한 변경 -->
    <update id="updateByActivateUserRolesId" >
        UPDATE
            user_roles
        SET roles = "USER"
        WHERE user_userid = #{userid}
    </update>

    <!-- 신고 관리자페이지 커뮤니티글 삭제 -->
    <delete id="deleteBoardReport" >
        DELETE
                FROM
                reportboard
                WHERE boardid = #{boardid}
    </delete>

    <!-- 신고 커뮤니티 게시글 삭제 -->
    <delete id="deleteBoardWriteReport" >
        DELETE
                FROM
                boardwrite
                WHERE boardid = #{boardid}
    </delete>
    <!-- 신고 관리자페이지 개인글 삭제 -->
    <delete id="deleteIndividualReport" >
        DELETE
                FROM
                reportindividual
                WHERE individualid = #{individualid}
    </delete>

    <!-- 신고 개인 게시글 삭제 -->
    <delete id="deleteIndividualWriteReport" >
        DELETE
                FROM
                individualwrite
                WHERE individualid = #{individualid}
    </delete>
    <!-- 신고 관리자페이지 단체글 삭제 -->
    <delete id="deleteGroupReport" >
        DELETE
                FROM
                reportgroup
                WHERE groupid = #{groupid}
    </delete>

    <!-- 신고 단체 게시글 삭제 -->
    <delete id="deleteGroupWriteReport" >
        DELETE
                FROM
                groupwrite
                WHERE groupid = #{groupid}
    </delete>
    <!-- 신고 관리자페이지 중고글 삭제 -->
    <delete id="deleteUsedReport" >
        DELETE
                FROM
                reportused
                WHERE usedid = #{usedid}
    </delete>

    <!-- 신고 중고 게시글 삭제 -->
    <delete id="deleteUsedWriteReport" >
        DELETE
                FROM
                usedwrite
                WHERE usedid = #{usedid}
    </delete>


    <!-- 신고 관리자페이지 커뮤니티댓글 삭제 -->
    <delete id="deleteBoardCommentsReport" >
        DELETE
                FROM
                reportcomments
                WHERE commentsid = #{commentsid}
    </delete>

    <!-- 신고 커뮤니티 게시댓글 삭제 -->
    <delete id="deleteBoardCommentsWriteReport" >
        DELETE
                FROM
                comments
                WHERE commentsid = #{commentsid}
    </delete>
    <!-- 커뮤니티 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteReportCommentsCount" parameterType="com.project.ribbon.domain.post.PostReportCommentsCountRequest">

        UPDATE boardwrite SET commentcount = commentcount - 1 WHERE boardid = #{boardid}

    </update>
    <!-- 신고 관리자페이지 개인댓글 삭제 -->
    <delete id="deleteIndividualCommentsReport" >
        DELETE
                FROM
                reportindividualcomments
                WHERE commentsid = #{commentsid}
    </delete>

    <!-- 신고 개인 게시댓글 삭제 -->
    <delete id="deleteIndividualCommentsWriteReport" >
        DELETE
                FROM
                individualcomments
                WHERE commentsid = #{commentsid}
    </delete>
    <!-- 개인 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteReportIndividualCommentsCount" parameterType="com.project.ribbon.domain.post.PostReportIndividualCommentsCountRequest">

        UPDATE individualwrite SET commentcount = commentcount - 1 WHERE individualid = #{individualid}

    </update>
    <!-- 신고 관리자페이지 단체댓글 삭제 -->
    <delete id="deleteGroupCommentsReport" >
        DELETE
                FROM
                reportgroupcomments
                WHERE commentsid = #{commentsid}
    </delete>

    <!-- 신고 단체 게시댓글 삭제 -->
    <delete id="deleteGroupCommentsWriteReport" >
        DELETE
                FROM
                groupcomments
                WHERE commentsid = #{commentsid}
    </delete>
    <!-- 단체 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteReportGroupCommentsCount" parameterType="com.project.ribbon.domain.post.PostReportGroupCommentsCountRequest">

        UPDATE groupwrite SET commentcount = commentcount - 1 WHERE groupid = #{groupid}

    </update>
    <!-- 신고 관리자페이지 중고댓글 삭제 -->
    <delete id="deleteUsedCommentsReport" >
        DELETE
                FROM
                reportusedcomments
                WHERE commentsid = #{commentsid}
    </delete>

    <!-- 신고 중고 게시댓글 삭제 -->
    <delete id="deleteUsedCommentsWriteReport" >
        DELETE
                FROM
                usedcomments
                WHERE commentsid = #{commentsid}
    </delete>
    <!-- 중고 댓글 갯수 카운트 -1 -->
    <update id="updateDeleteReportUsedCommentsCount" parameterType="com.project.ribbon.domain.post.PostReportUsedCommentsCountRequest">

        UPDATE usedwrite SET commentcount = commentcount - 1 WHERE usedid = #{usedid}

    </update>

    <!-- 공지사 저장 -->
    <insert id="saveAnnouncement" parameterType="com.project.ribbon.domain.post.PostAnnouncementRequest"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO announcement (
            id,title,content,writedate
        ) VALUES (
                     #{id}
                 , #{title}
                 , #{content}
                 , NOW()
                 )
    </insert>

    <!-- 공지사항 조회 -->
    <select id="findAnnouncementAll" resultType="com.project.ribbon.domain.post.PostAnnouncementRequest">
        SELECT
            *
        FROM announcement
        ORDER BY writedate DESC
    </select>
    <!-- 문의하기 조회 -->
    <select id="findInquiryAll" resultType="com.project.ribbon.domain.post.PostReportBoardResponse">
        SELECT
            title,description,writedate
        FROM boardwrite
        WHERE id = 10
        ORDER BY writedate DESC LIMIT 20
    </select>

    <!-- 관리자 공지사항 삭제 -->
    <delete id="deleteAnnouncement" >
        DELETE
                FROM
                announcement
                WHERE id = #{id}
    </delete>
</mapper>